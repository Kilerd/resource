[config]
default_to_workspace = true
# ---- GENERAL ----

[tasks.verify]
description = "Format, lint with Clippy, build, run tests"
dependencies = ["fmt", "clippy", "build", "test_h_firefox"]

[tasks.verify_only]
description = "Like `verify`, but fails if the code isn't formatted. Builds in release mode. Primarily for CI."
dependencies = ["fmt_check", "clippy", "build_release", "test_h_firefox"]

# ---- BUILD & CREATE WASMS ----
[tasks.build]
workspace = true
description = "Build"
command = "cargo"
args = ["build"]

[tasks.build_release]
description = "Build, with the --release flag"
command = "cargo"
args = ["build", "--release"]

[tasks.create_wasm]
workspace = true
description = "Build with wasm-pack"
install_crate = { crate_name = "wasm-pack", binary = "wasm-pack", test_arg = "-V" }
command = "wasm-pack"
args = ["build", "--target", "web", "--out-name", "package","--out-dir","../server/templates/pkg/",  "--dev"]

[tasks.create_wasm_release]
description = "Build with wasm-pack"
install_crate = { crate_name = "wasm-pack", binary = "wasm-pack", test_arg = "-V" }
command = "wasm-pack"
args = ["build", "--target", "web", "--out-name", "package","--out-dir","../server/templates/pkg", "--release"]

[tasks.all]
workspace = true
description = "Build, and create wasms"
dependencies = ["build", "create_wasm"]

[tasks.watch]
workspace = true
description = "Build, create wasms, and watch/recompile files for changes"
dependencies = ["build", "create_wasm"]
watch = { ignore_pattern="pkg/*" }

[tasks.all_release]
description = "Build, and create wasms, with the --release flag"
workspace = false
dependencies = ["build_release", "create_wasm_release"]

[tasks.serve]
description = "Start server"
install_crate = { crate_name = "microserver", binary = "microserver", test_arg = "-h" }
workspace = false
command = "microserver"
args = ["--port", "${PORT}"]

# ---- TEST ----

[tasks.test]
description = "Run tests. Ex: 'cargo make test firefox'. Test envs: [chrome, firefox, safari]"
clear = true
workspace = false
install_crate = { crate_name = "wasm-pack", binary = "wasm-pack", test_arg = "-V" }
command = "wasm-pack"
args = ["test", "--${@}"]

[tasks.test_release]
extend = "test"
description = "Run tests in release mode. Ex: 'cargo make test firefox'. Test envs: [chrome, firefox, safari]"
args = ["test", "--${@}", "--release"]

[tasks.test_h]
description = "Run headless tests. Ex: 'cargo make test_h firefox'. Test envs: [chrome, firefox, safari]"
extend = "test"
args = ["test", "--headless", "--${@}"]

[tasks.test_h_firefox]
description = "Run headless tests with Firefox."
extend = "test"
args = ["test", "--headless", "--firefox"]

[tasks.test_h_release]
extend = "test_h"
description = "Run headless tests in release mode. Ex: 'cargo make test_h firefox'. Test envs: [chrome, firefox, safari]"
args = ["test", "--headless", "--${@}", "--release"]

[tasks.test_one]
description = "Run a single test in Firefox. Ex 'cargo make test_one my_test'"
clear = true
workspace = false
install_crate = { crate_name = "wasm-pack", binary = "wasm-pack", test_arg = "-V" }
command = "wasm-pack"
args = ["test", "--firefox", "--", "--lib", "${@}"]

[tasks.test_one_h]
description = "Run a single test in headless Firefox. Ex 'cargo make test_one_h my_test'"
clear = true
workspace = false
install_crate = { crate_name = "wasm-pack", binary = "wasm-pack", test_arg = "-V" }
command = "wasm-pack"
args = ["test", "--firefox", "--headless", "--", "--lib", "${@}"]

# ---- LINT ----

[tasks.fmt]
description = "Format with rustfmt"
workspace = false
install_crate = { crate_name = "rustfmt-nightly", rustup_component_name = "rustfmt", binary = "rustfmt", test_arg = "--help" }
command = "cargo"
args = ["fmt", "--all"]

[tasks.fmt_check]
extend = "fmt"
description = "Check format with rustfmt"
args = ["fmt", "--all", "--", "--check"]

[tasks.clippy]
description = "Lint with Clippy"
clear = true
workspace = false
install_crate = { rustup_component_name = "clippy", binary = "cargo-clippy", test_arg = "--help" }
command = "cargo"
args = ["clippy", "--all-features", "--", "--deny", "warnings", "--deny", "clippy::pedantic", "--deny", "clippy::nursery"]
